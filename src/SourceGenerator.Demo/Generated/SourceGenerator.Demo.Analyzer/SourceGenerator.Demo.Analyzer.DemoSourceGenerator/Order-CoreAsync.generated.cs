// <auto-generated />

namespace SourceGenerator.Demo
{
    public partial class Order
    {
        // SetCartNumber
        public global::SourceGenerator.Demo.Order SetCartNumber(string cartNumber) 
            => SetCartNumberCoreAsync(cartNumber, default, true).GetAwaiter().GetResult();
        public global::System.Threading.Tasks.Task<global::SourceGenerator.Demo.Order> SetCartNumberAsync(string cartNumber, global::System.Threading.CancellationToken cancellationToken = default) 
            => SetCartNumberCoreAsync(cartNumber, cancellationToken, false);

        // SetOrderNumber
        public global::SourceGenerator.Demo.Order SetOrderNumber(string orderNumber) 
            => SetOrderNumberCoreAsync(orderNumber, default, true).GetAwaiter().GetResult();
        public global::System.Threading.Tasks.Task<global::SourceGenerator.Demo.Order> SetOrderNumberAsync(string orderNumber, global::System.Threading.CancellationToken cancellationToken = default) 
            => SetOrderNumberCoreAsync(orderNumber, cancellationToken, false);

        // SetTest
        public global::SourceGenerator.Demo.Order SetTest(string orderNumber, int testInt = 2, double testDecimal = 2.2, string testString = "hello", string? testString2 = null, bool testBool = true, char testChar = 'b', global::System.Guid testGuid = default, global::SourceGenerator.Demo.TestEnum testEnum = global::SourceGenerator.Demo.TestEnum.Value2) 
            => SetTestCoreAsync(orderNumber, testInt, testDecimal, testString, testString2, testBool, testChar, testGuid, testEnum, default, true).GetAwaiter().GetResult();
        public global::System.Threading.Tasks.Task<global::SourceGenerator.Demo.Order> SetTestAsync(string orderNumber, int testInt = 2, double testDecimal = 2.2, string testString = "hello", string? testString2 = null, bool testBool = true, char testChar = 'b', global::System.Guid testGuid = default, global::SourceGenerator.Demo.TestEnum testEnum = global::SourceGenerator.Demo.TestEnum.Value2, global::System.Threading.CancellationToken cancellationToken = default) 
            => SetTestCoreAsync(orderNumber, testInt, testDecimal, testString, testString2, testBool, testChar, testGuid, testEnum, cancellationToken, false);

        // SetTestGeneric
        public global::SourceGenerator.Demo.Order SetTestGeneric<T,T2>() 
            where T : global::SourceGenerator.Demo.Entity, global::SourceGenerator.Demo.IEntity, new()
            where T2 : class
            => SetTestGenericCoreAsync<T,T2>(default, true).GetAwaiter().GetResult();
        public global::System.Threading.Tasks.Task<global::SourceGenerator.Demo.Order> SetTestGenericAsync<T,T2>(global::System.Threading.CancellationToken cancellationToken = default) 
            where T : global::SourceGenerator.Demo.Entity, global::SourceGenerator.Demo.IEntity, new()
            where T2 : class
            => SetTestGenericCoreAsync<T,T2>(cancellationToken, false);

        // AddProduct
        public global::SourceGenerator.Demo.Order AddProduct(string productReference, int quantity) 
            => AddProductCoreAsync(productReference, quantity, default, true).GetAwaiter().GetResult();
        public global::System.Threading.Tasks.Task<global::SourceGenerator.Demo.Order> AddProductAsync(string productReference, int quantity, global::System.Threading.CancellationToken cancellationToken = default) 
            => AddProductCoreAsync(productReference, quantity, cancellationToken, false);

    }
}